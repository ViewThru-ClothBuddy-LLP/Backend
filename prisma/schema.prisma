// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String
  phoneNumber String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Buyer  Buyer?
  Seller Seller?
  cart   Cart?   @relation("UserCart")
  orders Order[]

  products Product[] @relation("SellerProducts")

  @@map("users")
}

model Buyer {
  id      Int     @id @default(autoincrement())
  user    User    @relation(fields: [id], references: [id])
  address String?
  budget  Float?

  @@map("buyers")
}

model Seller {
  id            Int    @id @default(autoincrement())
  user          User   @relation(fields: [id], references: [id])
  storeName     String
  gstNumber     String @unique
  adharNumber   String @unique
  panCardNumber String @unique

  @@map("sellers")
}

model Cart {
  id        String   @id @default(uuid())
  userId    Int      @unique
  items     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation("UserCart", fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id          String   @id @default(uuid())
  userId      Int
  items       Json
  totalAmount Float
  status      String   @default("pending") // pending, confirmed, shipped, delivered, canceled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          String   @id @default(uuid())
  sellerId    Int // Foreign Key referencing User (Seller)
  name        String
  description String
  price       Decimal
  stock       Int
  discount    Int
  category    String
  images      String[] // Array of image URLs
  createdAt   DateTime @default(now())

  // Relations
  seller User @relation("SellerProducts", fields: [sellerId], references: [id], onDelete: Cascade)

  @@map("products")
}
